# Clojure CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-clojure/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/clojure:lein-2.7.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6
        environment:
                - POSTGRES_USER: root
                - POSTGRES_DB: closptest

    working_directory: ~/repo

    environment:
      LEIN_ROOT: "true"
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m

    steps:
      - checkout

      - run: sudo apt-get update && sudo apt-get install postgresql-client

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0

      - run:
        name: install geckodriver
        command: |
            wget https://github.com/mozilla/geckodriver/releases/download/v0.19.1/geckodriver-v0.19.1-linux64.tar.gz
            sudo sh -c 'tar -x geckodriver -zf geckodriver-v0.19.1-linux64.tar.gz -O > /usr/bin/geckodriver'
            sudo chmod +x /usr/bin/geckodriver

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "project.clj" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: lein deps

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "project.clj" }}

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          command: |
            psql -h localhost -p 5432 -U postgres -c "create user closptest with password 'closptest';"
            psql -h localhost -p 5432 -U postgres -c "alter user closptest with superuser;"
            psql -h localhost -p 5432 -U postgres -c "grant all privileges on database closptest to closptest;"
            psql -h localhost -p 5432 -U postgres -c "CREATE TABLE users ( id bigserial NOT NULL PRIMARY KEY, first_name character varying(30), last_name character varying(30), role character varying(30), email character varying(30) NOT NULL, last_login time, is_active BOOLEAN DEFAULT FALSE NOT NULL, pass character varying(200));"
            psql -h localhost -p 5432 -U postgres -c "ALTER TABLE users OWNER TO closptest;"
            psql -h localhost -p 5432 -U postgres -c "ALTER TABLE ONLY users ADD CONSTRAINT uk_6dotkott2kjsp8vw4d0m25fb7 UNIQUE (email);"
            psql -h localhost -p 5432 -U postgres -c "INSERT INTO users (first_name, last_name, email, role, is_active, pass) VALUES ('admin', 'admin', 'admin@localhost.de', 'admin', true, 'bcrypt+sha512$d6d175aaa9c525174d817a74$12$24326124313224314d345444356149457a67516150447967517a67472e717a2e777047565a7071495330625441704f46686a556b5535376849743575');"

      - run: lein new closp closptest -n de.sveri.closptest

      - run: |
          cd closptest
          lein rel-jar

      - run:
          name: start server
          command: |
              cd closptest && java -jar target/closptest.jar
          background: true

      - run:
          name: Wait for server
          command: dockerize -wait tcp://localhost:3000 -timeout 2m

      - run: cd closptest && lein test